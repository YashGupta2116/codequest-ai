// AI-Driven Programming Course Platform
// Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users
model User {
  id                    String    @id @default(uuid())
  username              String    @unique
  email                 String    @unique
  passwordHash          String    @map("password_hash")
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  avatarUrl             String?   @map("avatar_url")
  bio                   String?
  githubUsername        String?   @map("github_username")
  linkedinUrl           String?   @map("linkedin_url")
  websiteUrl            String?   @map("website_url")
  isPremium             Boolean   @default(false) @map("is_premium")
  subscriptionType      SubscriptionType @default(FREE) @map("subscription_type")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  totalXp               Int       @default(0) @map("total_xp")
  currentStreak         Int       @default(0) @map("current_streak")
  longestStreak         Int       @default(0) @map("longest_streak")
  lastActivityDate      DateTime? @map("last_activity_date") @db.Date
  isEmailVerified       Boolean   @default(false) @map("is_email_verified")
  isActive              Boolean   @default(true) @map("is_active")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  courseRoadmaps        CourseRoadmap[]
  levelProgress         LevelProgress[]
  assignmentSubmissions AssignmentSubmission[]
  bossTestAttempts      BossTestAttempt[]
  achievements          UserAchievement[]
  certificates          Certificate[]
  forumPosts            ForumPost[]
  forumComments         ForumComment[]

  @@map("users")
}

// Base programming languages/technologies available
model ProgrammingLanguage {
  id            String   @id @default(uuid())
  name          String   @unique // "Python", "JavaScript", "Go", etc.
  displayName   String   @map("display_name") // "Python 3", "Modern JavaScript"
  description   String
  iconUrl       String?  @map("icon_url")
  color         String?  // Hex color for UI theming
  isActive      Boolean  @default(true) @map("is_active")
  sortOrder     Int      @default(0) @map("sort_order")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  courseRoadmaps CourseRoadmap[]

  @@map("programming_languages")
}

// User-specific course roadmaps generated by AI
model CourseRoadmap {
  id                     String              @id @default(uuid())
  userId                 String              @map("user_id")
  programmingLanguageId  String              @map("programming_language_id")
  difficultyLevel        DifficultyLevel     @map("difficulty_level")
  title                  String              // AI-generated title
  description            String              // AI-generated description
  estimatedHours         Int?                @map("estimated_hours")
  roadmapData            Json                @map("roadmap_data") // AI-generated roadmap structure
  status                 RoadmapStatus       @default(DRAFT)
  isCompleted            Boolean             @default(false) @map("is_completed")
  completedAt            DateTime?           @map("completed_at")
  currentLevelIndex      Int                 @default(0) @map("current_level_index") // Track user's current position
  createdAt              DateTime            @default(now()) @map("created_at")
  updatedAt              DateTime            @updatedAt @map("updated_at")

  // Relations
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  programmingLanguage    ProgrammingLanguage @relation(fields: [programmingLanguageId], references: [id])
  levels                 CourseLevel[]
  certificates           Certificate[]

  @@unique([userId, programmingLanguageId, difficultyLevel])
  @@map("course_roadmaps")
}

// Individual levels within a course roadmap
model CourseLevel {
  id                    String              @id @default(uuid())
  roadmapId             String              @map("roadmap_id")
  levelIndex            Int                 @map("level_index") // Order in the roadmap (0, 1, 2...)
  title                 String              // AI-generated level title
  description           String              // What the user will learn
  levelType             LevelType           @map("level_type")
  content               String?             // Theory content (for THEORY and THEORY_ASSIGNMENT)
  estimatedTime         Int?                @map("estimated_time") // minutes
  xpReward              Int                 @default(50) @map("xp_reward")
  concepts              String[]            // Programming concepts covered
  isGenerated           Boolean             @default(false) @map("is_generated") // Has AI generated the content?
  isUnlocked            Boolean             @default(false) @map("is_unlocked") // Is available to user?
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")

  // Relations
  roadmap               CourseRoadmap       @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  assignments           Assignment[]        // For THEORY_ASSIGNMENT and BOSS_TEST levels
  progress              LevelProgress[]
  bossTestAttempts      BossTestAttempt[]

  @@unique([roadmapId, levelIndex])
  @@map("course_levels")
}

// Assignments/exercises within levels
model Assignment {
  id               String  @id @default(uuid())
  levelId          String  @map("level_id")
  title            String
  instructions     String  // What the user needs to do
  starterCode      String? @map("starter_code")
  solutionCode     String  @map("solution_code")
  testCases        Json    @map("test_cases") // Test cases for validation
  hints            Json?   // Progressive hints
  difficulty       DifficultyLevel
  xpReward         Int     @default(25) @map("xp_reward")
  timeLimit        Int?    @map("time_limit") // seconds (for boss tests)
  passingScore     Int?    @map("passing_score") // percentage needed to pass (for boss tests)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  level            CourseLevel              @relation(fields: [levelId], references: [id], onDelete: Cascade)
  submissions      AssignmentSubmission[]

  @@map("assignments")
}

// User progress on individual levels
model LevelProgress {
  id              String          @id @default(uuid())
  userId          String          @map("user_id")
  levelId         String          @map("level_id")
  status          ProgressStatus  @default(NOT_STARTED)
  score           Int?            // Percentage score (mainly for boss tests)
  timeSpent       Int             @default(0) @map("time_spent") // seconds
  attempts        Int             @default(0) // Number of attempts
  startedAt       DateTime?       @map("started_at")
  completedAt     DateTime?       @map("completed_at")
  lastAccessedAt  DateTime?       @map("last_accessed_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  level           CourseLevel     @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
  @@map("level_progress")
}

// Assignment submissions
model AssignmentSubmission {
  id              String           @id @default(uuid())
  userId          String           @map("user_id")
  assignmentId    String           @map("assignment_id")
  code            String
  status          SubmissionStatus
  score           Int?             // Percentage score
  testResults     Json?            @map("test_results")
  executionTime   Int?             @map("execution_time") // milliseconds
  feedback        String?          // AI-generated feedback
  hintsUsed       Int              @default(0) @map("hints_used")
  submittedAt     DateTime         @default(now()) @map("submitted_at")

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment      Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_submissions")
}

// Boss test attempts (special tracking for boss levels)
model BossTestAttempt {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  levelId         String    @map("level_id")
  score           Int       // Final percentage score
  passed          Boolean   // Did they meet the passing threshold?
  timeUsed        Int       @map("time_used") // seconds taken
  attempts        Int       // Which attempt number this was
  completedAt     DateTime  @default(now()) @map("completed_at")

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  level           CourseLevel @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@map("boss_test_attempts")
}

// Achievements system
model Achievement {
  id          String            @id @default(uuid())
  title       String
  description String
  iconUrl     String?           @map("icon_url")
  badgeUrl    String?           @map("badge_url")
  xpReward    Int               @default(0) @map("xp_reward")
  category    AchievementCategory
  criteria    Json              // Achievement criteria as JSON
  isActive    Boolean           @default(true) @map("is_active")
  createdAt   DateTime          @default(now()) @map("created_at")

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

// User achievements
model UserAchievement {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  achievementId String      @map("achievement_id")
  earnedAt      DateTime    @default(now()) @map("earned_at")

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Course completion certificates
model Certificate {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  roadmapId       String        @map("roadmap_id")
  certificateUrl  String        @map("certificate_url")
  finalScore      Int           @map("final_score") // Overall course percentage
  completionTime  Int           @map("completion_time") // Total hours spent
  issuedAt        DateTime      @default(now()) @map("issued_at")

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap         CourseRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId])
  @@map("certificates")
}

// Forum categories
model ForumCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  sortOrder   Int         @default(0) @map("sort_order")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  posts       ForumPost[]

  @@map("forum_categories")
}

// Forum posts
model ForumPost {
  id         String        @id @default(uuid())
  title      String
  content    String
  authorId   String        @map("author_id")
  categoryId String        @map("category_id")
  isPinned   Boolean       @default(false) @map("is_pinned")
  isLocked   Boolean       @default(false) @map("is_locked")
  views      Int           @default(0)
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  // Relations
  author     User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments   ForumComment[]

  @@map("forum_posts")
}

// Forum comments
model ForumComment {
  id        String    @id @default(uuid())
  content   String
  authorId  String    @map("author_id")
  postId    String    @map("post_id")
  parentId  String?   @map("parent_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    ForumComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   ForumComment[] @relation("CommentReplies")

  @@map("forum_comments")
}

// Enums
enum SubscriptionType {
  FREE
  PREMIUM
  LIFETIME

  @@map("subscription_type")
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL

  @@map("difficulty_level")
}

enum RoadmapStatus {
  DRAFT
  GENERATING
  READY
  IN_PROGRESS
  COMPLETED

  @@map("roadmap_status")
}

enum LevelType {
  THEORY           // Pure textual theory
  THEORY_ASSIGNMENT // Theory + coding assignment
  BOSS_TEST        // Test/evaluation level

  @@map("level_type")
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED

  @@map("progress_status")
}

enum SubmissionStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  ERROR
  PARTIAL

  @@map("submission_status")
}

enum AchievementCategory {
  COMPLETION
  STREAK
  SPEED
  PERFECT_SCORE
  DEDICATION
  EXPLORATION

  @@map("achievement_category")
}